package cn.chestnut.mvvm.teamworker.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.chestnut.mvvm.teamworker.model.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT".
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatId = new Property(1, String.class, "chatId", false, "CHAT_ID");
        public final static Property UserList = new Property(2, String.class, "userList", false, "USER_LIST");
        public final static Property AdminId = new Property(3, String.class, "adminId", false, "ADMIN_ID");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property ChatName = new Property(5, String.class, "chatName", false, "CHAT_NAME");
        public final static Property ChatPic = new Property(6, String.class, "chatPic", false, "CHAT_PIC");
        public final static Property ChatType = new Property(7, Integer.class, "chatType", false, "CHAT_TYPE");
        public final static Property CreateTime = new Property(8, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(9, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property LastMessage = new Property(10, String.class, "lastMessage", false, "LAST_MESSAGE");
    }


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_ID\" TEXT UNIQUE ," + // 1: chatId
                "\"USER_LIST\" TEXT," + // 2: userList
                "\"ADMIN_ID\" TEXT," + // 3: adminId
                "\"USER_ID\" TEXT," + // 4: userId
                "\"CHAT_NAME\" TEXT," + // 5: chatName
                "\"CHAT_PIC\" TEXT," + // 6: chatPic
                "\"CHAT_TYPE\" INTEGER," + // 7: chatType
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 8: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 9: updateTime
                "\"LAST_MESSAGE\" TEXT);"); // 10: lastMessage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(2, chatId);
        }
 
        String userList = entity.getUserList();
        if (userList != null) {
            stmt.bindString(3, userList);
        }
 
        String adminId = entity.getAdminId();
        if (adminId != null) {
            stmt.bindString(4, adminId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String chatName = entity.getChatName();
        if (chatName != null) {
            stmt.bindString(6, chatName);
        }
 
        String chatPic = entity.getChatPic();
        if (chatPic != null) {
            stmt.bindString(7, chatPic);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(8, chatType);
        }
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getUpdateTime());
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(11, lastMessage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(2, chatId);
        }
 
        String userList = entity.getUserList();
        if (userList != null) {
            stmt.bindString(3, userList);
        }
 
        String adminId = entity.getAdminId();
        if (adminId != null) {
            stmt.bindString(4, adminId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String chatName = entity.getChatName();
        if (chatName != null) {
            stmt.bindString(6, chatName);
        }
 
        String chatPic = entity.getChatPic();
        if (chatPic != null) {
            stmt.bindString(7, chatPic);
        }
 
        Integer chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindLong(8, chatType);
        }
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getUpdateTime());
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(11, lastMessage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userList
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adminId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chatName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chatPic
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // chatType
            cursor.getLong(offset + 8), // createTime
            cursor.getLong(offset + 9), // updateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // lastMessage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdminId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChatName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChatPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChatType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.getLong(offset + 8));
        entity.setUpdateTime(cursor.getLong(offset + 9));
        entity.setLastMessage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
