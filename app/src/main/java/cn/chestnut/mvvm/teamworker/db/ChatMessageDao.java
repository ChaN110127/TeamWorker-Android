package cn.chestnut.mvvm.teamworker.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.chestnut.mvvm.teamworker.model.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatMessageId = new Property(1, String.class, "chatMessageId", false, "CHAT_MESSAGE_ID");
        public final static Property ChatId = new Property(2, String.class, "chatId", false, "CHAT_ID");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property SenderId = new Property(4, String.class, "senderId", false, "SENDER_ID");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property SendTime = new Property(6, long.class, "sendTime", false, "SEND_TIME");
        public final static Property Done = new Property(7, boolean.class, "done", false, "DONE");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_MESSAGE_ID\" TEXT UNIQUE ," + // 1: chatMessageId
                "\"CHAT_ID\" TEXT," + // 2: chatId
                "\"USER_ID\" TEXT," + // 3: userId
                "\"SENDER_ID\" TEXT," + // 4: senderId
                "\"MESSAGE\" TEXT," + // 5: message
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 6: sendTime
                "\"DONE\" INTEGER NOT NULL );"); // 7: done
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatMessageId = entity.getChatMessageId();
        if (chatMessageId != null) {
            stmt.bindString(2, chatMessageId);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(3, chatId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(5, senderId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
        stmt.bindLong(7, entity.getSendTime());
        stmt.bindLong(8, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chatMessageId = entity.getChatMessageId();
        if (chatMessageId != null) {
            stmt.bindString(2, chatMessageId);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(3, chatId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(5, senderId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
        stmt.bindLong(7, entity.getSendTime());
        stmt.bindLong(8, entity.getDone() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatMessageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chatId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.getLong(offset + 6), // sendTime
            cursor.getShort(offset + 7) != 0 // done
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChatId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendTime(cursor.getLong(offset + 6));
        entity.setDone(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
