package cn.chestnut.mvvm.teamworker.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.chestnut.mvvm.teamworker.model.NewFriendRequest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_FRIEND_REQUEST".
*/
public class NewFriendRequestDao extends AbstractDao<NewFriendRequest, Long> {

    public static final String TABLENAME = "NEW_FRIEND_REQUEST";

    /**
     * Properties of entity NewFriendRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewFriendRequestId = new Property(1, String.class, "newFriendRequestId", false, "NEW_FRIEND_REQUEST_ID");
        public final static Property RequesterId = new Property(2, String.class, "requesterId", false, "REQUESTER_ID");
        public final static Property RecipientId = new Property(3, String.class, "recipientId", false, "RECIPIENT_ID");
        public final static Property AuthenticationMessage = new Property(4, String.class, "authenticationMessage", false, "AUTHENTICATION_MESSAGE");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property RequesterNickname = new Property(6, String.class, "requesterNickname", false, "REQUESTER_NICKNAME");
        public final static Property RequesterTelephone = new Property(7, String.class, "requesterTelephone", false, "REQUESTER_TELEPHONE");
        public final static Property RequesterAvatar = new Property(8, String.class, "requesterAvatar", false, "REQUESTER_AVATAR");
        public final static Property Accepted = new Property(9, boolean.class, "accepted", false, "ACCEPTED");
        public final static Property Send = new Property(10, boolean.class, "send", false, "SEND");
    }


    public NewFriendRequestDao(DaoConfig config) {
        super(config);
    }
    
    public NewFriendRequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_FRIEND_REQUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NEW_FRIEND_REQUEST_ID\" TEXT," + // 1: newFriendRequestId
                "\"REQUESTER_ID\" TEXT," + // 2: requesterId
                "\"RECIPIENT_ID\" TEXT," + // 3: recipientId
                "\"AUTHENTICATION_MESSAGE\" TEXT," + // 4: authenticationMessage
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"REQUESTER_NICKNAME\" TEXT," + // 6: requesterNickname
                "\"REQUESTER_TELEPHONE\" TEXT," + // 7: requesterTelephone
                "\"REQUESTER_AVATAR\" TEXT," + // 8: requesterAvatar
                "\"ACCEPTED\" INTEGER NOT NULL ," + // 9: accepted
                "\"SEND\" INTEGER NOT NULL );"); // 10: send
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_FRIEND_REQUEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewFriendRequest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String newFriendRequestId = entity.getNewFriendRequestId();
        if (newFriendRequestId != null) {
            stmt.bindString(2, newFriendRequestId);
        }
 
        String requesterId = entity.getRequesterId();
        if (requesterId != null) {
            stmt.bindString(3, requesterId);
        }
 
        String recipientId = entity.getRecipientId();
        if (recipientId != null) {
            stmt.bindString(4, recipientId);
        }
 
        String authenticationMessage = entity.getAuthenticationMessage();
        if (authenticationMessage != null) {
            stmt.bindString(5, authenticationMessage);
        }
        stmt.bindLong(6, entity.getTime());
 
        String requesterNickname = entity.getRequesterNickname();
        if (requesterNickname != null) {
            stmt.bindString(7, requesterNickname);
        }
 
        String requesterTelephone = entity.getRequesterTelephone();
        if (requesterTelephone != null) {
            stmt.bindString(8, requesterTelephone);
        }
 
        String requesterAvatar = entity.getRequesterAvatar();
        if (requesterAvatar != null) {
            stmt.bindString(9, requesterAvatar);
        }
        stmt.bindLong(10, entity.getAccepted() ? 1L: 0L);
        stmt.bindLong(11, entity.getSend() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewFriendRequest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String newFriendRequestId = entity.getNewFriendRequestId();
        if (newFriendRequestId != null) {
            stmt.bindString(2, newFriendRequestId);
        }
 
        String requesterId = entity.getRequesterId();
        if (requesterId != null) {
            stmt.bindString(3, requesterId);
        }
 
        String recipientId = entity.getRecipientId();
        if (recipientId != null) {
            stmt.bindString(4, recipientId);
        }
 
        String authenticationMessage = entity.getAuthenticationMessage();
        if (authenticationMessage != null) {
            stmt.bindString(5, authenticationMessage);
        }
        stmt.bindLong(6, entity.getTime());
 
        String requesterNickname = entity.getRequesterNickname();
        if (requesterNickname != null) {
            stmt.bindString(7, requesterNickname);
        }
 
        String requesterTelephone = entity.getRequesterTelephone();
        if (requesterTelephone != null) {
            stmt.bindString(8, requesterTelephone);
        }
 
        String requesterAvatar = entity.getRequesterAvatar();
        if (requesterAvatar != null) {
            stmt.bindString(9, requesterAvatar);
        }
        stmt.bindLong(10, entity.getAccepted() ? 1L: 0L);
        stmt.bindLong(11, entity.getSend() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewFriendRequest readEntity(Cursor cursor, int offset) {
        NewFriendRequest entity = new NewFriendRequest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // newFriendRequestId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // requesterId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recipientId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // authenticationMessage
            cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // requesterNickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // requesterTelephone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // requesterAvatar
            cursor.getShort(offset + 9) != 0, // accepted
            cursor.getShort(offset + 10) != 0 // send
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewFriendRequest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewFriendRequestId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRequesterId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecipientId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthenticationMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setRequesterNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRequesterTelephone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRequesterAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAccepted(cursor.getShort(offset + 9) != 0);
        entity.setSend(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewFriendRequest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewFriendRequest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewFriendRequest entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
